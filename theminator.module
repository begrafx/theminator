<?php

/**
 * Implements hook_theme_suggestions_alter().
 */
function theminator_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'field') {
    $config = _theminator_get_immutable_config();

    $theminator_config = $config->get("theme_config");

    $element = &$variables['element'];

    $id = "entity--node--" . $element['#bundle'] . "__" . $element['#field_name'];

      //dpm($suggestions);
      //dpm($variables);

    if (!empty($theminator_config[$id]['theme'])) {
      $suggestions = array("theminator_field");
      if (!in_array($theminator_config[$id]['theme'], $suggestions)) {
        $suggestions[] = $theminator_config[$id]['theme'];
      }
    }
  }
}

/**
 * Implements hook_preprocess().
 */
function theminator_preprocess(&$variables, $hook)
{
    if ($hook == 'field') {
        $element = &$variables['element'];
        if($element['#field_name'] == 'title') {

        }
    }
}

/**
 * Implements hook_theme().
 */
function theminator_theme($existing, $type, $theme, $path) {
  $hooks = array(
    "field__theminator" => array(
      "variables" => array('field' => null),
      "template" => "theminator-field",
      "path" => $path . "/templates",
    )
  );

  $default = \Drupal::service('theme_handler')->getDefault();
  $theme_path = drupal_get_path("theme", $default);

  if (file_exists(realpath($theme_path) . "/theminator.yml")) {
    $yaml = \Symfony\Component\Yaml\Yaml::parse(file_get_contents($theme_path . "/theminator.yml"));

    if (!empty($yaml['field']) && is_array($yaml['field'])) {
      foreach ($yaml['field'] AS $theme_hook => $template) {
        $hooks[$theme_hook . "__theminator"] = array(
          //"template" => $template,
          //"path" => $theme_path . "/templates/theminator",
          //"theme path" => $theme_path,
          "render element" => "element"
        );
      }
    }
  }

  return $hooks;
}

/**
 * Wrapper for getting module immutable config.
 *
 * @return \Drupal\Core\Config\ImmutableConfig
 */
function _theminator_get_immutable_config() {
  return \Drupal::config('theminator.settings');
}

/**
 * Wrapper for getting editable config.
 */
function _theminator_get_editable_config() {
  return \Drupal::service('config.factory')->getEditable('theminator.settings');
}
